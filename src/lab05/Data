0-----20 add
0-----21 addu
0-----22 sub
0-----23 subu
0-----24 and
0-----25 or
0-----26 xor
0-----27 nor
0-----2A slt
0-----2B sltu
0------0 sll
0------2 srl
0------3 sra
0------4 sllv
0------6 srlv
0------7 srav
0--00008 jr

3C--IMM lui

test1:r-type

j 80(addr = 14)
lui $0,ff
lui $1,23
add $2 = $1+$0
addu $3 = $1+$0
sub $4 = $0-$1
subu $2 = $1-$0
sll $5 = $2 << 2
srl $6 = $2 >> 8
srl $7 = $2 >> 16
slt $8 if ($6<$7)
sltu $8 if ($6<$7)
and $9 = $6 $7
or $9 = $6 $7
xor $9 = $6 $7
nor $9 = $6 $7
sllv $10 = $2<<$8
srlv $10 = $2 >> $8
srav $10 = $2 >> $8
jr 
lui $0,1234
addi $1 = $0 + A789
addiu $1 = $0 + A789
andi $2 = $1 5A5A
ori $2 = $1 5A5A
xori $2 = $1 5A5A;
slti $3 if ($1<ffffC000)
sltiu $3 if ($1<ffffC000)
sw [$3+1] = $2
sw [$3+2] = $1
lw $4 = [$3+1]
lw $4 = [$3+1]
beq to last inst(pc+FFFF<<2) $1 $2;not branch
bne to last inst(pc+FFFF<<2) $1 $4;not branch
;beq to last inst(pc+FFFF<<2) $1 $4
;bne to last inst(pc+FFFF<<2) $1 $2
jal 4(addr = 1) 
bne to last inst(pc+FFFF<<2) $1 $4